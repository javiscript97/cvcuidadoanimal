security:
    # Registrando el hash de las contraseñas
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\Cliente:
            algorithm: bcrypt   
        App\Entity\Veterinario:
            algorithm: bcrypt 
        App\Entity\Administrador:
            algorithm: bcrypt


    providers:
        admins:
            entity:
                class: App\Entity\Administrador
                property: mail
        veterinarios:
            entity:
                class: App\Entity\Veterinario
                property: mail
        clientes:
            entity:
                class: App\Entity\Cliente
                property: mail
    
        database_users:
            chain:
                providers: [admins, veterinarios, clientes]

    # Firewalls
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: database_users  # para usar la base de datos
            form_login:
                login_path: app_login
                check_path: app_login
                success_handler: App\Security\LoginSuccessHandler  # Si es cierto el login salta el handler
            logout:
                path: app_logout
                target: app_login

    # Jerarquía de roles
    role_hierarchy:
        ROLE_ADMIN: ROLE_VET
        ROLE_VET: ROLE_USER

    # Control de acceso
  
    access_control:
    - { path: ^/panel-control, roles: ROLE_ADMIN }
    - { path: ^/historial/add, roles: ROLE_VET }
    - { path: ^/vet, roles: ROLE_VET }
    - { path: ^/profile, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/user, roles: ROLE_USER }
    - { path: ^/agenda, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/historial, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/reservar-cita, roles: IS_AUTHENTICATED_FULLY }

        


        


# Configuración para el entorno de test
when@test:
    security:
        password_hashers:
            # Por defecto, los hashers de contraseñas consumen muchos recursos y tiempo. Esto es importante para generar contraseñas seguras.
            # En las pruebas, sin embargo, los hashes seguros no son importantes, desperdician recursos e incrementan los tiempos de prueba.
            # Lo siguiente reduce el factor de trabajo a los valores más bajos posibles.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Valor más bajo posible para bcrypt
                time_cost: 3 # Valor más bajo posible para argon
                memory_cost: 10 # Valor más bajo posible para argon
